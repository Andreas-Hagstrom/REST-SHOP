// Handles individual products & img

const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");
const multer = require("multer"); // Handles img upload, can't be handled by bodyParser

// Storage strategy - changes configuration for how imgÂ´s are stored & types of img's allowed
const storage = multer.diskStorage({
  destination: function(req, file, cb) {
    cb(null, "./uploads/");
  },
  // Executed by multer when a new file is recieved
  filename: function(req, file, cb) {
    cb(null, new Date().toISOString() + file.originalname); // Adds timestamp to img & changes name to original filename
  }
});

// Handles what type of img that is allowed to be uploaded
const fileFilter = (req, file, cb) => {
  if (file.mimetype === "image/jpeg" || file.mimetype === "image/png") {
    cb(null, true);
  } else {
    cb(null, false);
  }
};

// Handles img upload + size & type
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 1024 * 1024 * 5 // Max file size 5GB
  },
  fileFilter: fileFilter
});

const Product = require("../models/product");

// Handles GET -  gets product name, price, id & img
router.get("/", (req, res, next) => {
  Product.find()
    .select("name price _id productImage")
    .exec()
    .then(docs => {
      const response = {
        //Info about # of products & full specifikation including url for specified product
        count: docs.length,
        products: docs.map(doc => {
          return {
            name: doc.name,
            price: doc.price,
            productImage: doc.productImage,
            _id: doc._id,
            request: {
              type: "GET",
              url: "http://localhost:3000/products/" + doc._id
            }
          };
        })
      };

      //   if (docs.length >= 0) {
      res.status(200).json(response);
      //   }else {
      //       res.status(404).json({
      //           message: 'No entries found'
      //       });
      //   }
    })
    // Handles error
    .catch(err => {
      console.log(err);
      res.status(500).json({
        error: err
      });
    });
});

// Handles POST - create new product, store autogenerated id
// upload.single = only parses ONE file
// Store img on db

router.post("/", upload.single("productImage"), (req, res, next) => {
  console.log(req.file);
  const product = new Product({
    _id: new mongoose.Types.ObjectId(),
    name: req.body.name,
    price: req.body.price,
    productImage: req.file.path
  });
  // Method for storing product in db
  product
    .save()
    .then(result => {
      console.log(result);
      res.status(201).json({
        msg: "Successfull creation of product",
        createdProduct: {
          name: result.name,
          price: result.price,
          _id: result._id,
          request: {
            type: "GET",
            url: "http://localhost:3000/products/" + result._id
          }
        }
      });
    })
    // Handles error
    .catch(err => {
      console.log(err);
      res.status(500).json({
        error: err
      });
    });
});

// Handles GET Single Product - name, price id & image
router.get("/:productID", (req, res, next) => {
  const id = req.params.productID;
  Product.findById(id)
    .select("name price _id productImage")
    .exec()
    .then(doc => {
      console.log("From database", doc);
      if (doc) {
        res.status(200).json({
          product: doc,
          request: {
            type: "GET",
            url: "http://localhost:3000/products"
          }
        });
      } else {
        res
          .status(404)
          .json({ message: "No valid entry found for the provided ID" });
      }
    })
    .catch(err => {
      console.log(err);
      res.status(500).json({ error: err });
    });
});

// Handles PATCH - update product
router.patch("/:productID", (req, res, next) => {
  const id = req.params.productID;
  const updateOps = {};
  for (const ops of req.body) {
    updateOps[ops.propName] = ops.value;
  }
  Product.update({ _id: id }, { $set: updateOps })
    .exec()
    .then(result => {
      res.status(200).json({
        msg: "Product updated",
        // GET request to url to get info on products
        request: {
          type: "GET",
          url: "http://localhost:3000/products/" + id
        }
      });
    })
    // Error handling
    .catch(err => {
      console.log(err);
      res.status(500).json({
        error: err
      });
    });
});

// Handles DELETE - deletes product
router.delete("/:productID", (req, res, next) => {
  const id = req.params.productID;
  Product.remove({ _id: id })
    .exec()
    .then(result => {
      res.status(200).json({
        msg: "Product deleted",
        // GET request to url to get info on product
        request: {
          type: "POST",
          url: "http://localhost:3000/products/",
          body: { name: "String", price: "Number" }
        }
      });
    })
    // Error handling
    .catch(err => {
      console.log(err);
      res.status(500).json({
        error: err
      });
    });
});

module.exports = router;
